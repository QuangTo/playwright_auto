import { z } from 'zod';
import { test, expect } from '@playwright/test';
import { generateMock } from '@anatine/zod-mock';
import { paths, components } from '@api/types/pet-type';
import { fetchOpenApiInfo } from '@api/versionCheck/fetchOpenApiInfo';
import { schemas as autoGeneratedZodSchema } from '@api/zod-schemas/zodSchema';

/**
 * Sample link:
 * https://petstore31.swagger.io/api/v31/openapi.json
 * https://petstore3.swagger.io/api/v3/openapi.json
 */

const baseUrl = 'https://petstore3.swagger.io/api/v3';
type PetPayloadRequest = components['schemas']['Pet'];
type PetResponse = paths['/pet']['post']['responses']['200']['content']['application/json'];

/**
 * compare api version (ci\cd) if has changes, need to generate API Schema
 */
test.beforeAll(async () => {
  const { openapi, version } = await fetchOpenApiInfo('https://petstore31.swagger.io/api/v31/openapi.json');
  // console.log('version', openapi, version);
});

test('validate with zod schema', { tag: '@api' }, async ({ request }) => {
  // manual create schema with zod
  const PetSchema = z.object({
    id: z.number(),
    name: z.string(),
    category: z.object({
      id: z.number(),
      name: z.string()
    }),
    photoUrls: z.array(z.string())
  });

  const petData: PetPayloadRequest = {
    id: 123,
    name: 'Dog',
    category: { id: 1, name: 'Luna' },
    photoUrls: ['https://example.com/dog.jpg'],
    tags: [{ id: 1, name: 'friendly' }],
    status: 'available'
  };
  const res = await request.post(`${baseUrl}/pet`, {
    data: petData
  });
  const resBody = await res.json();
  const responseData: PetResponse = resBody;
  expect(res.status()).toBe(200);
  expect(responseData.id).toBe(petData.id);
  // validate response
  PetSchema.parse(resBody);
});

test('validate with Auto Generated zod schema', { tag: '@api' }, async ({ request }) => {
  type PetPayloadRequest = components['schemas']['Pet'];
  type PetResponse = paths['/pet']['post']['responses']['200']['content']['application/json'];
  // define generated zod schema
  const PetSchema = autoGeneratedZodSchema.Pet;
  // create request data following schema type
  const petData: PetPayloadRequest = {
    id: 123,
    name: 'Dog',
    category: { id: 1, name: 'Luna' },
    photoUrls: ['https://example.com/dog.jpg'],
    tags: [{ id: 1, name: 'friendly' }],
    status: 'available'
  };
  const res = await request.post(`${baseUrl}/pet`, {
    data: petData
  });
  const resBody = await res.json();
  // validate response schema
  const responseData: PetResponse = resBody;
  expect(res.status()).toBe(200);
  expect(responseData.id).toBe(petData.id);
  // validate response
  PetSchema.parse(resBody);
});

test('validate with auto generated zod schema and mock data', { tag: '@api' }, async ({ request }) => {
  const PetSchema = autoGeneratedZodSchema.Pet;
  // create pet with mock schema data
  const petMockData: PetPayloadRequest = generateMock(PetSchema);
  const res = await request.post(`${baseUrl}/pet`, {
    data: petMockData
  });
  const resBody = await res.json();
  const responseData: PetResponse = resBody;
  expect(res.status()).toBe(200);
  expect(responseData.id).toBe(petMockData.id);
  PetSchema.parse(resBody);
});
