import { petFactory } from '@api/factories';
import { test, expect } from '@playwright/test';
import { generateMock } from '@anatine/zod-mock';
import { paths, components } from '@api/types/pet-type';
import { schemas as autoGeneratedZodSchema } from '@api/zod-schemas/zodSchema';

const baseUrl = 'https://petstore3.swagger.io/api/v3';
type PetRequest = components['schemas']['Pet'];
type PetResponse = paths['/pet']['post']['responses']['200']['content']['application/json'];

/**
 * Showcase different ways to create request payload for POST /pet endpoint
 * 1. use factory with builder pattern
 * 2. generate mock data based on zod schema
 */

// use builder
test('@api POST /pet - valid body then receive 200', async ({ request }) => {
  const petRequestPayload = petFactory.petBuilder();
  const res = await request.post(`${baseUrl}/pet`, {
    data: petRequestPayload
  });
  const resBody = await res.json();
  const responseData: PetResponse = resBody;
  expect(res.status()).toBe(200);
  expect(responseData.id).toBe(petRequestPayload.id);
});

// generate mock data based on zod schema
test('@api POST /pet - generated mock body data then receive 200', async ({ request }) => {
  const PetSchema = autoGeneratedZodSchema.Pet;
  const petMockData: PetRequest = generateMock(PetSchema);
  const res = await request.post(`${baseUrl}/pet`, {
    data: petMockData
  });
  const resBody = await res.json();
  const responseData: PetResponse = resBody;
  expect(res.status()).toBe(200);
  expect(responseData.id).toBe(petMockData.id);
  PetSchema.parse(resBody);
});
