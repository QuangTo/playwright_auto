// THIS FILE IS AUTO-GENERATED BY openapi-fetch-gen.
// DO NOT EDIT THIS FILE MANUALLY.
// See Also: https://github.com/moznion/openapi-fetch-gen
import createClient, { type ClientOptions } from 'openapi-fetch';
import type { components, paths } from '../types/openApiType.js'; // generated by openapi-typescript

export class Client<HT extends Record<string, string>> {
  private readonly client;
  private readonly defaultHeaders: HT;

  constructor(clientOptions: ClientOptions, defaultHeaders?: HT) {
    this.client = createClient<paths>(clientOptions);
    this.defaultHeaders = defaultHeaders ?? ({} as HT);
  }

  /**
   * Add a new pet to the store.
   */
  async postPet(body: {
    id?: number;
    name: string;
    category?: { id?: number; name?: string };
    photoUrls: string[];
    tags?: { id?: number; name?: string }[];
    status?: 'available' | 'pending' | 'sold';
  }) {
    return await this.client.POST('/pet', {
      body
    });
  }

  /**
   * Update an existing pet.
   */
  async putPet(body: {
    id?: number;
    name: string;
    category?: { id?: number; name?: string };
    photoUrls: string[];
    tags?: { id?: number; name?: string }[];
    status?: 'available' | 'pending' | 'sold';
  }) {
    return await this.client.PUT('/pet', {
      body
    });
  }

  /**
   * Finds Pets by status.
   */
  async getPetFindbystatus(params: { query: { status?: 'available' | 'pending' | 'sold' } }) {
    return await this.client.GET('/pet/findByStatus', {
      params
    });
  }

  /**
   * Finds Pets by tags.
   */
  async getPetFindbytags(params: { query: { tags?: string[] } }) {
    return await this.client.GET('/pet/findByTags', {
      params
    });
  }

  /**
   * Find pet by ID.
   */
  async getPetPetid(params: { path: { petId: number } }) {
    return await this.client.GET('/pet/{petId}', {
      params
    });
  }

  /**
   * Updates a pet in the store with form data.
   */
  async postPetPetid(params: { query: { name?: string; status?: string }; path: { petId: number } }) {
    return await this.client.POST('/pet/{petId}', {
      params
    });
  }

  /**
   * Deletes a pet.
   */
  async deletePetPetid(
    params: [
      Exclude<
        // Missed Header Keys for default headers
        keyof { api_key?: string },
        Extract<
          // Provided header keys by default headers' keys
          keyof HT,
          keyof { api_key?: string }
        >
      >
    ] extends [never]
      ? {
          header?: { api_key?: string };
          path: { petId: number };
        }
      : {
          header:
            | (Pick<
                // Pick the header keys that are not in the default headers
                { api_key?: string },
                Exclude<
                  // Missed Header Keys for default headers
                  keyof { api_key?: string },
                  Extract<
                    // Provided header keys by default headers' keys
                    keyof HT,
                    keyof { api_key?: string }
                  >
                >
              > &
                Partial<
                  // Disallow default headers' keys to be in the header param
                  Record<
                    Extract<
                      // Provided header keys by default headers' keys
                      keyof HT,
                      keyof { api_key?: string }
                    >,
                    never
                  >
                >)
            | { api_key?: string };
          path: { petId: number };
        }
  ) {
    return await this.client.DELETE('/pet/{petId}', {
      params: {
        ...params,
        header: { ...this.defaultHeaders, ...params.header } as {
          api_key?: string;
        }
      }
    });
  }

  /**
   * Uploads an image.
   */
  async postPetPetidUploadimage(params: { query: { additionalMetadata?: string }; path: { petId: number } }, body: string) {
    return await this.client.POST('/pet/{petId}/uploadImage', {
      params,
      body
    });
  }

  /**
   * Returns pet inventories by status.
   */
  async getStoreInventory() {
    return await this.client.GET('/store/inventory', {});
  }

  /**
   * Place an order for a pet.
   */
  async postStoreOrder(body: {
    id?: number;
    petId?: number;
    quantity?: number;
    shipDate?: string;
    status?: 'placed' | 'approved' | 'delivered';
    complete?: boolean;
  }) {
    return await this.client.POST('/store/order', {
      body
    });
  }

  /**
   * Find purchase order by ID.
   */
  async getStoreOrderOrderid(params: { path: { orderId: number } }) {
    return await this.client.GET('/store/order/{orderId}', {
      params
    });
  }

  /**
   * Delete purchase order by identifier.
   */
  async deleteStoreOrderOrderid(params: { path: { orderId: number } }) {
    return await this.client.DELETE('/store/order/{orderId}', {
      params
    });
  }

  /**
   * Create user.
   */
  async postUser(body: {
    id?: number;
    username?: string;
    firstName?: string;
    lastName?: string;
    email?: string;
    password?: string;
    phone?: string;
    userStatus?: number;
  }) {
    return await this.client.POST('/user', {
      body
    });
  }

  /**
   * Creates list of users with given input array.
   */
  async postUserCreatewithlist(
    body: {
      id?: number;
      username?: string;
      firstName?: string;
      lastName?: string;
      email?: string;
      password?: string;
      phone?: string;
      userStatus?: number;
    }[]
  ) {
    return await this.client.POST('/user/createWithList', {
      body
    });
  }

  /**
   * Logs user into the system.
   */
  async getUserLogin(params: { query: { username?: string; password?: string } }) {
    return await this.client.GET('/user/login', {
      params
    });
  }

  /**
   * Logs out current logged in user session.
   */
  async getUserLogout() {
    return await this.client.GET('/user/logout', {});
  }

  /**
   * Get user by user name.
   */
  async getUserUsername(params: { path: { username: string } }) {
    return await this.client.GET('/user/{username}', {
      params
    });
  }

  /**
   * Update user resource.
   */
  async putUserUsername(
    params: { path: { username: string } },
    body: {
      id?: number;
      username?: string;
      firstName?: string;
      lastName?: string;
      email?: string;
      password?: string;
      phone?: string;
      userStatus?: number;
    }
  ) {
    return await this.client.PUT('/user/{username}', {
      params,
      body
    });
  }

  /**
   * Delete user resource.
   */
  async deleteUserUsername(params: { path: { username: string } }) {
    return await this.client.DELETE('/user/{username}', {
      params
    });
  }
}

export type Order = components['schemas']['Order'];
export type Category = components['schemas']['Category'];
export type User = components['schemas']['User'];
export type Tag = components['schemas']['Tag'];
export type Pet = components['schemas']['Pet'];
export type ApiResponse = components['schemas']['ApiResponse'];
